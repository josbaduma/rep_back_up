/* The following code was generated by JFlex 1.5.1 */


/* --------------------------Codigo de Usuario----------------------- */
package gramatica;

import java_cup.runtime.*;
import java.io.Reader;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>alexico.flex</tt>
 */
class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\24\6\0"+
    "\1\15\1\16\1\13\1\11\1\0\1\12\1\0\1\14\1\4\1\5"+
    "\10\5\2\0\1\21\1\23\1\22\2\0\32\7\4\0\1\6\1\0"+
    "\1\32\1\7\1\42\1\44\1\30\1\31\1\41\1\40\1\35\2\7"+
    "\1\33\1\43\1\36\1\37\1\51\1\47\1\26\1\34\1\25\1\27"+
    "\1\45\4\7\1\17\1\7\1\20\62\0\1\10\74\0\1\50\3\0"+
    "\1\46\uff0e\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\2\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\2\1\12\5\1\1\1\5\1\20\1\4\1\5\1\21"+
    "\1\22\1\23\1\24\5\5\1\25\6\5\1\0\1\5"+
    "\1\26\1\4\12\5\1\0\3\5\1\0\2\5\1\27"+
    "\4\5\1\30\1\31\2\5\1\0\3\5\1\0\2\5"+
    "\1\32\1\5\1\33\2\5\1\34\1\0\1\5\1\35"+
    "\1\5\1\0\3\5\1\36\1\5\1\0\2\5\1\37"+
    "\1\40\3\5\1\41\3\5\1\42\1\43\1\44\1\45"+
    "\30\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\52\0\52\0\176\0\250\0\322"+
    "\0\52\0\52\0\52\0\52\0\52\0\52\0\52\0\52"+
    "\0\374\0\u0126\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222"+
    "\0\u024c\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372"+
    "\0\u039c\0\u03c6\0\u03f0\0\52\0\52\0\52\0\52\0\u041a"+
    "\0\u0444\0\u046e\0\u0498\0\u04c2\0\u04ec\0\u0516\0\u0540\0\u056a"+
    "\0\u0594\0\u05be\0\u05e8\0\u0612\0\u063c\0\52\0\u0666\0\u0690"+
    "\0\u06ba\0\u06e4\0\u070e\0\u0738\0\u0762\0\u078c\0\u07b6\0\u07e0"+
    "\0\u080a\0\u0834\0\u085e\0\u0888\0\u08b2\0\u08dc\0\u0906\0\u0930"+
    "\0\u0930\0\u095a\0\u0984\0\u09ae\0\u09d8\0\u0930\0\u0930\0\u0a02"+
    "\0\u0a2c\0\u0a56\0\u0a80\0\u0aaa\0\u0ad4\0\u0afe\0\u0b28\0\u0b52"+
    "\0\u0b52\0\u0b7c\0\u0b52\0\u0ba6\0\u0bd0\0\u0b52\0\u0bfa\0\u0c24"+
    "\0\u0b52\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc\0\u0cf6\0\u0ccc\0\u0d20"+
    "\0\u0d4a\0\u0d74\0\u0d9e\0\52\0\u0ccc\0\u0dc8\0\u0df2\0\u0e1c"+
    "\0\52\0\u0e46\0\u0e70\0\u0e9a\0\u0e9a\0\u0e9a\0\u0e9a\0\u0e9a"+
    "\0\u0ec4\0\u0eee\0\u0f18\0\u0f42\0\u0f6c\0\u0f96\0\u0fc0\0\u0fea"+
    "\0\u1014\0\u103e\0\u1068\0\u1092\0\u10bc\0\u10e6\0\u1110\0\u113a"+
    "\0\u1164\0\u118e\0\u11b8\0\u11e2\0\u120c\0\u1236\0\u1260\0\52";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\10\1\27"+
    "\1\30\1\31\1\10\1\32\3\10\1\33\1\10\1\34"+
    "\1\35\1\36\1\10\1\2\1\10\1\37\1\40\54\0"+
    "\1\4\53\0\2\41\50\0\2\42\50\0\2\43\1\0"+
    "\1\43\15\0\21\43\1\0\1\43\1\0\1\43\23\0"+
    "\1\44\51\0\1\45\51\0\1\46\51\0\1\47\32\0"+
    "\2\43\1\0\1\43\15\0\1\43\1\50\17\43\1\0"+
    "\1\43\1\0\1\43\4\0\2\43\1\0\1\43\15\0"+
    "\3\43\1\51\15\43\1\0\1\43\1\0\1\43\4\0"+
    "\2\43\1\0\1\43\15\0\11\43\1\52\7\43\1\0"+
    "\1\43\1\0\1\43\4\0\2\43\1\0\1\43\15\0"+
    "\5\43\1\53\13\43\1\0\1\43\1\0\1\43\4\0"+
    "\2\43\1\0\1\43\15\0\11\43\1\54\7\43\1\0"+
    "\1\43\1\0\1\43\4\0\2\43\1\0\1\43\15\0"+
    "\10\43\1\55\10\43\1\0\1\43\1\0\1\43\4\0"+
    "\2\43\1\0\1\43\15\0\5\43\1\56\13\43\1\0"+
    "\1\43\1\0\1\43\4\0\2\43\1\0\1\43\15\0"+
    "\10\43\1\57\10\43\1\0\1\43\1\0\1\43\4\0"+
    "\2\43\1\0\1\43\15\0\3\43\1\60\4\43\1\61"+
    "\1\43\1\62\6\43\1\0\1\43\1\0\1\43\4\0"+
    "\2\43\1\0\1\43\15\0\3\43\1\63\15\43\1\0"+
    "\1\43\1\0\1\43\36\0\1\64\17\0\2\43\1\0"+
    "\1\43\15\0\2\43\1\65\16\43\1\0\1\43\1\0"+
    "\1\43\10\0\1\66\45\0\2\67\2\0\1\66\45\0"+
    "\2\70\1\0\1\70\15\0\21\70\1\0\1\70\1\0"+
    "\1\70\4\0\2\70\1\0\1\70\15\0\2\70\1\71"+
    "\16\70\1\0\1\70\1\0\1\70\4\0\2\70\1\0"+
    "\1\70\15\0\15\70\1\72\3\70\1\0\1\70\1\0"+
    "\1\70\4\0\2\70\1\0\1\70\15\0\1\73\20\70"+
    "\1\0\1\70\1\0\1\70\4\0\2\70\1\0\1\70"+
    "\15\0\6\70\1\74\12\70\1\0\1\70\1\0\1\70"+
    "\4\0\2\70\1\0\1\70\15\0\2\70\1\75\16\70"+
    "\1\0\1\70\1\0\1\70\4\0\2\70\1\0\1\70"+
    "\15\0\11\70\1\76\7\70\1\0\1\70\1\0\1\70"+
    "\4\0\2\70\1\0\1\70\15\0\14\70\1\77\4\70"+
    "\1\0\1\70\1\0\1\70\4\0\2\70\1\0\1\70"+
    "\15\0\1\70\1\100\17\70\1\0\1\70\1\0\1\70"+
    "\4\0\2\70\1\0\1\70\15\0\17\70\1\101\1\70"+
    "\1\102\1\70\1\0\1\70\4\0\2\70\1\0\1\70"+
    "\15\0\3\70\1\103\15\70\1\0\1\70\1\0\1\70"+
    "\4\0\2\70\1\0\1\70\15\0\20\70\1\104\1\0"+
    "\1\70\1\0\1\70\4\0\2\70\1\0\1\70\15\0"+
    "\15\70\1\105\3\70\1\0\1\70\1\0\1\70\44\0"+
    "\1\106\11\0\2\70\1\0\1\70\15\0\6\70\1\107"+
    "\12\70\1\0\1\70\1\0\1\70\4\0\2\67\50\0"+
    "\2\110\1\0\1\110\15\0\21\110\1\0\1\110\1\0"+
    "\1\110\4\0\2\110\1\0\1\110\15\0\3\110\1\111"+
    "\15\110\1\0\1\110\1\0\1\110\4\0\2\110\1\0"+
    "\1\110\15\0\1\112\20\110\1\0\1\110\1\0\1\110"+
    "\4\0\2\110\1\0\1\110\15\0\12\110\1\113\6\110"+
    "\1\0\1\110\1\0\1\110\4\0\2\110\1\0\1\110"+
    "\15\0\7\110\1\114\11\110\1\0\1\110\1\0\1\110"+
    "\4\0\2\110\1\0\1\110\15\0\6\110\1\115\12\110"+
    "\1\0\1\110\1\0\1\110\4\0\2\110\1\0\1\110"+
    "\15\0\12\110\1\116\6\110\1\0\1\110\1\0\1\110"+
    "\4\0\2\110\1\0\1\110\15\0\5\110\1\117\13\110"+
    "\1\0\1\110\1\0\1\110\4\0\2\110\1\0\1\110"+
    "\15\0\15\110\1\120\3\110\1\0\1\110\1\0\1\110"+
    "\4\0\2\110\1\0\1\110\15\0\10\110\1\121\10\110"+
    "\1\0\1\110\1\0\1\110\35\0\1\122\20\0\2\110"+
    "\1\0\1\110\15\0\11\110\1\123\7\110\1\0\1\110"+
    "\1\0\1\110\4\0\2\110\1\0\1\110\15\0\3\110"+
    "\1\124\15\110\1\0\1\110\1\0\1\110\4\0\2\110"+
    "\1\0\1\110\15\0\6\110\1\125\12\110\1\0\1\110"+
    "\1\0\1\110\35\0\1\126\20\0\2\110\1\0\1\110"+
    "\15\0\14\110\1\127\4\110\1\0\1\110\1\0\1\110"+
    "\4\0\2\130\1\0\1\130\15\0\21\130\1\0\1\130"+
    "\1\0\1\130\4\0\2\130\1\0\1\130\15\0\12\130"+
    "\1\131\6\130\1\0\1\130\1\0\1\130\4\0\2\130"+
    "\1\0\1\130\15\0\11\130\1\132\7\130\1\0\1\130"+
    "\1\0\1\130\4\0\2\130\1\0\1\130\15\0\3\130"+
    "\1\133\15\130\1\0\1\130\1\0\1\130\4\0\2\130"+
    "\1\0\1\130\15\0\5\130\1\134\13\130\1\0\1\130"+
    "\1\0\1\130\4\0\2\130\1\0\1\130\15\0\2\130"+
    "\1\135\16\130\1\0\1\130\1\0\1\130\4\0\2\130"+
    "\1\0\1\130\15\0\12\130\1\136\6\130\1\0\1\130"+
    "\1\0\1\130\47\0\1\137\6\0\2\130\1\0\1\130"+
    "\15\0\1\140\20\130\1\0\1\130\1\0\1\130\4\0"+
    "\2\130\1\0\1\130\15\0\1\130\1\141\17\130\1\0"+
    "\1\130\1\0\1\130\4\0\2\130\1\0\1\130\15\0"+
    "\5\130\1\142\13\130\1\0\1\130\1\0\1\130\42\0"+
    "\1\143\13\0\2\130\1\0\1\130\15\0\5\130\1\144"+
    "\13\130\1\0\1\130\1\0\1\130\4\0\2\145\1\0"+
    "\1\145\15\0\21\145\1\0\1\145\1\0\1\145\4\0"+
    "\2\145\1\0\1\145\15\0\15\145\1\146\3\145\1\0"+
    "\1\145\1\0\1\145\4\0\2\145\1\0\1\145\15\0"+
    "\1\145\1\147\17\145\1\0\1\145\1\0\1\145\4\0"+
    "\2\145\1\0\1\145\15\0\6\145\1\150\12\145\1\0"+
    "\1\145\1\0\1\145\27\0\1\151\26\0\2\145\1\0"+
    "\1\145\15\0\1\145\1\152\17\145\1\0\1\145\1\0"+
    "\1\145\4\0\2\145\1\0\1\145\15\0\1\145\1\153"+
    "\17\145\1\0\1\145\1\0\1\145\30\0\1\154\25\0"+
    "\2\145\1\0\1\145\15\0\1\145\1\155\17\145\1\0"+
    "\1\145\1\0\1\145\4\0\2\156\1\0\1\156\15\0"+
    "\21\156\1\0\1\156\1\0\1\156\4\0\2\156\1\0"+
    "\1\156\15\0\3\156\1\157\15\156\1\0\1\156\1\0"+
    "\1\156\4\0\2\156\1\0\1\156\15\0\5\156\1\160"+
    "\13\156\1\0\1\156\1\0\1\156\30\0\1\161\25\0"+
    "\2\156\1\0\1\156\15\0\5\156\1\162\13\156\1\0"+
    "\1\156\1\0\1\156\4\0\2\156\1\0\1\156\15\0"+
    "\5\156\1\163\13\156\1\0\1\156\1\0\1\156\4\0"+
    "\2\164\1\0\1\164\15\0\21\164\1\0\1\164\1\0"+
    "\1\164\4\0\2\164\1\0\1\164\15\0\7\164\1\165"+
    "\11\164\1\0\1\164\1\0\1\164\4\0\2\164\1\0"+
    "\1\164\15\0\1\164\1\166\17\164\1\0\1\164\1\0"+
    "\1\164\4\0\2\164\1\0\1\164\15\0\7\164\1\167"+
    "\11\164\1\0\1\164\1\0\1\164\4\0\2\164\1\0"+
    "\1\164\15\0\1\164\1\170\17\164\1\0\1\164\1\0"+
    "\1\164\4\0\2\171\1\0\1\171\15\0\21\171\1\0"+
    "\1\171\1\0\1\171\4\0\2\172\1\0\1\172\15\0"+
    "\21\172\1\0\1\172\1\0\1\172\4\0\2\173\1\0"+
    "\1\173\15\0\21\173\1\0\1\173\1\0\1\173\4\0"+
    "\2\174\1\0\1\174\15\0\21\174\1\0\1\174\1\0"+
    "\1\174\4\0\2\175\1\0\1\175\15\0\21\175\1\0"+
    "\1\175\1\0\1\175\4\0\2\176\1\0\1\176\15\0"+
    "\21\176\1\0\1\176\1\0\1\176\4\0\2\177\1\0"+
    "\1\177\15\0\21\177\1\0\1\177\1\0\1\177\4\0"+
    "\2\200\1\0\1\200\15\0\21\200\1\0\1\200\1\0"+
    "\1\200\4\0\2\201\1\0\1\201\15\0\21\201\1\0"+
    "\1\201\1\0\1\201\4\0\2\202\1\0\1\202\15\0"+
    "\21\202\1\0\1\202\1\0\1\202\4\0\2\203\1\0"+
    "\1\203\15\0\21\203\1\0\1\203\1\0\1\203\4\0"+
    "\2\204\1\0\1\204\15\0\21\204\1\0\1\204\1\0"+
    "\1\204\4\0\2\205\1\0\1\205\15\0\21\205\1\0"+
    "\1\205\1\0\1\205\4\0\2\206\1\0\1\206\15\0"+
    "\21\206\1\0\1\206\1\0\1\206\4\0\2\207\1\0"+
    "\1\207\15\0\21\207\1\0\1\207\1\0\1\207\4\0"+
    "\2\210\1\0\1\210\15\0\21\210\1\0\1\210\1\0"+
    "\1\210\4\0\2\211\1\0\1\211\15\0\21\211\1\0"+
    "\1\211\1\0\1\211\4\0\2\212\1\0\1\212\15\0"+
    "\21\212\1\0\1\212\1\0\1\212\4\0\2\213\1\0"+
    "\1\213\15\0\21\213\1\0\1\213\1\0\1\213\4\0"+
    "\2\214\1\0\1\214\15\0\21\214\1\0\1\214\1\0"+
    "\1\214\4\0\2\215\1\0\1\215\15\0\21\215\1\0"+
    "\1\215\1\0\1\215\4\0\2\216\1\0\1\216\15\0"+
    "\21\216\1\0\1\216\1\0\1\216\4\0\2\217\1\0"+
    "\1\217\15\0\21\217\1\0\1\217\1\0\1\217\4\0"+
    "\2\220\1\0\1\220\15\0\21\220\1\0\1\220\1\0"+
    "\1\220";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4746];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\3\1\10\11\23\1\4\11"+
    "\14\1\1\0\1\1\1\11\13\1\1\0\3\1\1\0"+
    "\13\1\1\0\3\1\1\0\10\1\1\0\3\1\1\0"+
    "\5\1\1\0\2\1\1\11\4\1\1\11\36\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  AnalizadorLexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 124) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { throw new Error("Caracter ilegal <"+yytext()+">");
          }
        case 38: break;
        case 2: 
          { System.out.print(yytext());
                          return symbol(sym.NEWLINE);
          }
        case 39: break;
        case 3: 
          { /* ignora el espacio */
          }
        case 40: break;
        case 4: 
          { System.out.print(yytext()); 
                          return symbol(sym.NUM, new Integer(yytext()));
          }
        case 41: break;
        case 5: 
          { System.out.print(yytext());
                          return symbol(sym.ID, new String(yytext()));
          }
        case 42: break;
        case 6: 
          { System.out.print(" + ");
                          return symbol(sym.OP_SUMA);
          }
        case 43: break;
        case 7: 
          { System.out.print(" - ");
                          return symbol(sym.OP_RESTA);
          }
        case 44: break;
        case 8: 
          { System.out.print(" * ");
                          return symbol(sym.OP_MULT);
          }
        case 45: break;
        case 9: 
          { System.out.print(" * ");
                          return symbol(sym.OP_DIV);
          }
        case 46: break;
        case 10: 
          { System.out.print(" ( ");
                          return symbol(sym.PARENIZQ);
          }
        case 47: break;
        case 11: 
          { System.out.print(" ) ");
                          return symbol(sym.PARENDER);
          }
        case 48: break;
        case 12: 
          { System.out.print(" { ");
                          return symbol(sym.LLAVIZQ);
          }
        case 49: break;
        case 13: 
          { System.out.print(" } ");
                          return symbol(sym.LLAVDER);
          }
        case 50: break;
        case 14: 
          { System.out.print(" < ");
                          return symbol(sym.MENQUE, new String(yytext()));
          }
        case 51: break;
        case 15: 
          { System.out.print(" > ");
                          return symbol(sym.MAYQUE, new String(yytext()));
          }
        case 52: break;
        case 16: 
          { System.out.print(yytext()); 
                          return symbol(sym.NIVEL, new Integer(yytext()));
          }
        case 53: break;
        case 17: 
          { System.out.print(" <= ");
                          return symbol(sym.MENIGUAL, new String(yytext()));
          }
        case 54: break;
        case 18: 
          { System.out.print(" >= ");
                          return symbol(sym.MAYIGUAL, new String(yytext()));
          }
        case 55: break;
        case 19: 
          { System.out.print(" == ");
                          return symbol(sym.IGUAL, new String(yytext()));
          }
        case 56: break;
        case 20: 
          { System.out.print(" != ");
                          return symbol(sym.DISTINTO, new String(yytext()));
          }
        case 57: break;
        case 21: 
          { System.out.print(" si ");
                          return symbol(sym.SI);
          }
        case 58: break;
        case 22: 
          { System.out.print(yytext()); 
                          return symbol(sym.GRADO, new String(yytext()));
          }
        case 59: break;
        case 23: 
          { System.out.print("true");
                          return symbol(sym.TRUE);
          }
        case 60: break;
        case 24: 
          { System.out.print(" sino ");
                          return symbol(sym.SINO);
          }
        case 61: break;
        case 25: 
          { System.out.print(" haga ");
                          return symbol(sym.HAGA);
          }
        case 62: break;
        case 26: 
          { System.out.print(" recto ");
                          return symbol(sym.RECTO);
          }
        case 63: break;
        case 27: 
          { System.out.print("false");
                          return symbol(sym.FALSE);
          }
        case 64: break;
        case 28: 
          { System.out.print(" medio ");
                          return symbol(sym.MEDIO, new String(yytext()));
          }
        case 65: break;
        case 29: 
          { System.out.print(" mover ");
                          return symbol(sym.MOVER);
          }
        case 66: break;
        case 30: 
          { System.out.print(" anular ");
                          return symbol(sym.ANULAR, new String(yytext()));
          }
        case 67: break;
        case 31: 
          { System.out.print(" índice ");
                          return symbol(sym.INDICE, new String(yytext()));
          }
        case 68: break;
        case 32: 
          { System.out.print(" pulgar ");
                          return symbol(sym.PULGAR, new String(yytext()));
          }
        case 69: break;
        case 33: 
          { System.out.print(" meñique ");
                          return symbol(sym.MENIQUE, new String(yytext()));
          }
        case 70: break;
        case 34: 
          { System.out.print(" entonces ");
                          return symbol(sym.ENTONCES);
          }
        case 71: break;
        case 35: 
          { System.out.print(" circular ");
                          return symbol(sym.CIRCULAR);
          }
        case 72: break;
        case 36: 
          { System.out.print(" mientras ");
                          return symbol(sym.MIENTRAS);
          }
        case 73: break;
        case 37: 
          { System.out.print("declarar ");
                          return symbol(sym.DECLARAR);
          }
        case 74: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
