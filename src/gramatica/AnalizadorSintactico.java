
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jun 21 04:50:35 CST 2014
//----------------------------------------------------

package gramatica;

import java_cup.runtime.*;
import estructuradedatos.*;
import java.io.FileReader;
import java.util.Vector;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jun 21 04:50:35 CST 2014
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\002\004\000\002\002\004\000\002\012" +
    "\004\000\002\012\003\000\002\013\004\000\002\010\004" +
    "\000\002\010\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\020\005\000\002" +
    "\014\005\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\016\004" +
    "\000\002\016\004\000\002\003\005\000\002\003\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\021" +
    "\005\000\002\021\005\000\002\021\003\000\002\022\005" +
    "\000\002\022\005\000\002\022\003\000\002\023\005\000" +
    "\002\023\003\000\002\023\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\007\003\000\002\007" +
    "\005\000\002\017\012\000\002\017\010\000\002\011\010" +
    "\000\002\011\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\004\033\006\001\002\000\016\014\020\017" +
    "\025\021\024\023\022\033\006\043\023\001\002\000\004" +
    "\002\011\001\002\000\004\014\010\001\002\000\016\014" +
    "\ufffe\017\ufffe\021\ufffe\023\ufffe\033\ufffe\043\ufffe\001\002" +
    "\000\016\014\ufffd\017\ufffd\021\ufffd\023\ufffd\033\ufffd\043" +
    "\ufffd\001\002\000\004\002\001\001\002\000\016\002\000" +
    "\014\020\017\025\021\024\023\022\043\023\001\002\000" +
    "\022\002\ufff7\012\ufff7\014\ufff7\017\ufff7\020\ufff7\021\ufff7" +
    "\023\ufff7\043\ufff7\001\002\000\022\002\ufff9\012\ufff9\014" +
    "\ufff9\017\ufff9\020\ufff9\021\ufff9\023\ufff9\043\ufff9\001\002" +
    "\000\022\002\ufffa\012\ufffa\014\ufffa\017\ufffa\020\ufffa\021" +
    "\ufffa\023\ufffa\043\ufffa\001\002\000\020\002\ufffb\012\ufffb" +
    "\014\ufffb\017\ufffb\021\ufffb\023\ufffb\043\ufffb\001\002\000" +
    "\016\014\uffff\017\uffff\021\uffff\023\uffff\033\uffff\043\uffff" +
    "\001\002\000\004\026\120\001\002\000\022\002\ufff8\012" +
    "\ufff8\014\ufff8\017\ufff8\020\ufff8\021\ufff8\023\ufff8\043\ufff8" +
    "\001\002\000\004\010\113\001\002\000\014\036\104\037" +
    "\102\040\103\041\105\042\100\001\002\000\016\013\043" +
    "\014\020\017\025\021\024\023\022\043\023\001\002\000" +
    "\004\010\026\001\002\000\014\010\036\014\037\015\031" +
    "\016\035\044\027\001\002\000\050\002\uffde\004\uffde\005" +
    "\uffde\006\uffde\007\uffde\011\uffde\012\uffde\014\uffde\017\uffde" +
    "\020\uffde\021\uffde\023\uffde\024\uffde\025\uffde\027\uffde\030" +
    "\uffde\031\uffde\032\uffde\043\uffde\001\002\000\044\002\uffec" +
    "\004\060\005\061\011\uffec\012\uffec\014\uffec\017\uffec\020" +
    "\uffec\021\uffec\023\uffec\024\070\025\073\027\065\030\067" +
    "\031\071\032\072\043\uffec\001\002\000\024\002\uffdb\011" +
    "\uffdb\012\uffdb\014\uffdb\017\uffdb\020\uffdb\021\uffdb\023\uffdb" +
    "\043\uffdb\001\002\000\050\002\uffe0\004\uffe0\005\uffe0\006" +
    "\uffe0\007\uffe0\011\uffe0\012\uffe0\014\uffe0\017\uffe0\020\uffe0" +
    "\021\uffe0\023\uffe0\024\uffe0\025\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\032\uffe0\043\uffe0\001\002\000\050\002\uffe3\004\uffe3" +
    "\005\uffe3\006\055\007\056\011\uffe3\012\uffe3\014\uffe3\017" +
    "\uffe3\020\uffe3\021\uffe3\023\uffe3\024\uffe3\025\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\043\uffe3\001\002\000\024\002" +
    "\uffdc\011\uffdc\012\uffdc\014\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\023\uffdc\043\uffdc\001\002\000\024\002\uffda\011\uffda\012" +
    "\uffda\014\uffda\017\uffda\020\uffda\021\uffda\023\uffda\043\uffda" +
    "\001\002\000\010\010\036\014\037\044\027\001\002\000" +
    "\050\002\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\011\uffdd" +
    "\012\uffdd\014\uffdd\017\uffdd\020\uffdd\021\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\043\uffdd" +
    "\001\002\000\004\011\041\001\002\000\004\022\042\001" +
    "\002\000\016\013\043\014\020\017\025\021\024\023\022" +
    "\043\023\001\002\000\014\014\020\017\025\021\024\023" +
    "\022\043\023\001\002\000\022\002\uffd6\012\uffd6\014\uffd6" +
    "\017\uffd6\020\046\021\uffd6\023\uffd6\043\uffd6\001\002\000" +
    "\022\002\uffd9\012\uffd9\014\uffd9\017\uffd9\020\uffd9\021\uffd9" +
    "\023\uffd9\043\uffd9\001\002\000\016\013\043\014\020\017" +
    "\025\021\024\023\022\043\023\001\002\000\022\002\uffd7" +
    "\012\uffd7\014\uffd7\017\uffd7\020\uffd7\021\uffd7\023\uffd7\043" +
    "\uffd7\001\002\000\016\012\052\014\020\017\025\021\024" +
    "\023\022\043\023\001\002\000\020\002\ufffc\012\ufffc\014" +
    "\ufffc\017\ufffc\021\ufffc\023\ufffc\043\ufffc\001\002\000\022" +
    "\002\uffd8\012\uffd8\014\uffd8\017\uffd8\020\uffd8\021\uffd8\023" +
    "\uffd8\043\uffd8\001\002\000\004\011\054\001\002\000\050" +
    "\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\011\uffdf\012" +
    "\uffdf\014\uffdf\017\uffdf\020\uffdf\021\uffdf\023\uffdf\024\uffdf" +
    "\025\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\043\uffdf\001" +
    "\002\000\010\010\036\014\037\044\027\001\002\000\010" +
    "\010\036\014\037\044\027\001\002\000\050\002\uffe1\004" +
    "\uffe1\005\uffe1\006\uffe1\007\uffe1\011\uffe1\012\uffe1\014\uffe1" +
    "\017\uffe1\020\uffe1\021\uffe1\023\uffe1\024\uffe1\025\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\043\uffe1\001\002\000\010" +
    "\010\036\014\037\044\027\001\002\000\010\010\036\014" +
    "\037\044\027\001\002\000\050\002\uffe4\004\uffe4\005\uffe4" +
    "\006\uffe4\007\uffe4\011\uffe4\012\uffe4\014\uffe4\017\uffe4\020" +
    "\uffe4\021\uffe4\023\uffe4\024\uffe4\025\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\043\uffe4\001\002\000\050\002\uffe5\004" +
    "\uffe5\005\uffe5\006\uffe5\007\uffe5\011\uffe5\012\uffe5\014\uffe5" +
    "\017\uffe5\020\uffe5\021\uffe5\023\uffe5\024\uffe5\025\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\043\uffe5\001\002\000\050" +
    "\002\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\011\uffe2\012" +
    "\uffe2\014\uffe2\017\uffe2\020\uffe2\021\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\043\uffe2\001" +
    "\002\000\010\010\uffe9\014\uffe9\044\uffe9\001\002\000\010" +
    "\010\036\014\037\044\027\001\002\000\010\010\uffe8\014" +
    "\uffe8\044\uffe8\001\002\000\010\010\uffeb\014\uffeb\044\uffeb" +
    "\001\002\000\010\010\uffe7\014\uffe7\044\uffe7\001\002\000" +
    "\010\010\uffe6\014\uffe6\044\uffe6\001\002\000\010\010\uffea" +
    "\014\uffea\044\uffea\001\002\000\030\002\uffed\004\060\005" +
    "\061\011\uffed\012\uffed\014\uffed\017\uffed\020\uffed\021\uffed" +
    "\023\uffed\043\uffed\001\002\000\004\023\076\001\002\000" +
    "\014\010\036\014\037\015\031\016\035\044\027\001\002" +
    "\000\022\002\uffd4\012\uffd4\014\uffd4\017\uffd4\020\uffd4\021" +
    "\uffd4\023\uffd4\043\uffd4\001\002\000\006\034\ufff0\035\ufff0" +
    "\001\002\000\006\034\110\035\106\001\002\000\006\034" +
    "\ufff3\035\ufff3\001\002\000\006\034\ufff2\035\ufff2\001\002" +
    "\000\006\034\ufff4\035\ufff4\001\002\000\006\034\ufff1\035" +
    "\ufff1\001\002\000\004\044\112\001\002\000\022\002\ufff5" +
    "\012\ufff5\014\ufff5\017\ufff5\020\ufff5\021\ufff5\023\ufff5\043" +
    "\ufff5\001\002\000\004\044\111\001\002\000\022\002\uffef" +
    "\012\uffef\014\uffef\017\uffef\020\uffef\021\uffef\023\uffef\043" +
    "\uffef\001\002\000\022\002\uffee\012\uffee\014\uffee\017\uffee" +
    "\020\uffee\021\uffee\023\uffee\043\uffee\001\002\000\014\010" +
    "\036\014\037\015\031\016\035\044\027\001\002\000\004" +
    "\011\115\001\002\000\004\021\116\001\002\000\016\013" +
    "\043\014\020\017\025\021\024\023\022\043\023\001\002" +
    "\000\022\002\uffd5\012\uffd5\014\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\023\uffd5\043\uffd5\001\002\000\010\010\036\014\037" +
    "\044\027\001\002\000\022\002\ufff6\012\ufff6\014\ufff6\017" +
    "\ufff6\020\ufff6\021\ufff6\023\ufff6\043\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\010\002\004\012\003\013\006\001\001\000" +
    "\020\006\015\010\011\011\020\013\016\014\014\017\013" +
    "\020\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\050\011\020\014\014\017\013\020\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\100\001\001\000\016" +
    "\006\044\007\074\011\020\014\014\017\013\020\012\001" +
    "\001\000\002\001\001\000\014\003\033\005\037\021\027" +
    "\022\032\023\031\001\001\000\002\001\001\000\004\004" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\052\021\027\022\032\023\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\006\044\007" +
    "\043\011\020\014\014\017\013\020\012\001\001\000\016" +
    "\006\015\010\047\011\020\014\014\017\013\020\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\006\044" +
    "\007\046\011\020\014\014\017\013\020\012\001\001\000" +
    "\002\001\001\000\014\006\050\011\020\014\014\017\013" +
    "\020\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\021\063\022\032" +
    "\023\031\001\001\000\010\021\056\022\032\023\031\001" +
    "\001\000\002\001\001\000\010\021\062\022\032\023\031" +
    "\001\001\000\010\021\061\022\032\023\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\021\073\022\032\023\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\033\005\076\021\027\022\032\023\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\033\005\113\021\027\022\032\023\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\006\044" +
    "\007\116\011\020\014\014\017\013\020\012\001\001\000" +
    "\002\001\001\000\012\003\120\021\027\022\032\023\031" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




              public void report_error(String message, Object info) {
                  StringBuilder m = new StringBuilder("Error");
                  if (info instanceof java_cup.runtime.Symbol) {
                      java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
                      if (s.left >= 0) {                
                          m.append(" in line "+(s.left+1));
                          if (s.right >= 0)
                              m.append(", column "+(s.right+1));
                      }
                  }
                  m.append(" : "+message);
                  System.err.println(m);
              }

              public void report_fatal_error(String message, Object info) {
                  report_error(message, info);
                  System.exit(1);
              }

              public static void main(String[] args){
                  try {
                      AnalizadorSintactico asin = new AnalizadorSintactico(
                              new AnalizadorLexico( new FileReader(args[0])));
                      Object result = asin.parse().value;
                      System.out.println("\n*** Resultados finales ***");
                  } catch (Exception ex) {
                      ex.printStackTrace();
                  }
              }
            
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {



              static ListaSimple tablaSimbolos = new ListaSimple();
              static Vector<Dedo> listaDedos = new Vector();

              public int getNUM(String pDato)
              {
                if(pDato.indexOf("recto") != -1)
                {
                  return Integer.parseInt(pDato.replaceAll("recto", ""));
                }else{
                  return Integer.parseInt(pDato.replaceAll("circular", ""));
                }
              }

              public String getTIPO(String pDato)
              {
                if(pDato.indexOf("recto") != -1)
                {
                  return "recto";
                }else{
                  return "circular";
                }
              }

              public Vector<Dedo> unirLista(Vector<Dedo> pLista1, Vector<Dedo> pLista2)
              {
                if(pLista2==null)
                {
                  return pLista1;
                }else{
                  for(int i = 0; i < pLista2.size(); i++)
                  {
                    pLista1.add(pLista2.elementAt(i));
                  }
                }
                return pLista1;
              }

            
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaracioniteracion ::= HAGA listadeclaracionescondicionadas MIENTRAS expresioncondicion 
            {
              Object RESULT =null;
		int ldcleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ldcright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ldc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    System.out.println(ldc);
                    RESULT = ldc;
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracioniteracion",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracioniteracion ::= MIENTRAS PARENIZQ expresioncondicion PARENDER HAGA listadeclaracionescondicionadas 
            {
              Object RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int ldcleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ldcright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ldc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    System.out.println(ldc);
                    RESULT = ldc;
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracioniteracion",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracionseleccion ::= SI PARENIZQ expresioncondicion PARENDER ENTONCES listadeclaracionescondicionadas 
            {
              Object RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int ldcleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ldcright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ldc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    if( (boolean)ec == true)
                    {
                      unirLista(listaDedos, ((Vector<Dedo>)ldc));
                      RESULT = ldc;
                    }
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracionseleccion",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaracionseleccion ::= SI PARENIZQ expresioncondicion PARENDER ENTONCES listadeclaracionescondicionadas SINO listadeclaracionescondicionadas 
            {
              Object RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int ldcaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ldcaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ldca = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int ldcbleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ldcbright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ldcb = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    if((boolean)ec == true){
                      RESULT = ldca;
                    }else{
                      RESULT = ldcb;
                    }
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracionseleccion",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // listadeclaracionescondicionadas ::= LLAVIZQ listadeclaraciones LLAVDER 
            {
              Object RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object ld = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                    RESULT = ld;
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listadeclaracionescondicionadas",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // listadeclaracionescondicionadas ::= declaracion 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listadeclaracionescondicionadas",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresioncondicion ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = f;
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresioncondicion",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresioncondicion ::= TRUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
                    RESULT = t;
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresioncondicion",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresioncondicion ::= expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = e;
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresioncondicion",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // termino ::= ID 
            {
              Integer RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                  RESULT = tablaSimbolos.buscar(nom.toString()).getValor();
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termino",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // termino ::= NUM 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = e;
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termino",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // termino ::= PARENIZQ expresion PARENDER 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                  RESULT = (int)e;
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termino",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresionmult ::= termino 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = t;
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresionmult",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresionmult ::= expresionmult OP_DIV expresionsuma 
            {
              Integer RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                  if(e != 0) {
                    RESULT = new Integer(f.intValue() / e.intValue());
                  }else{
                    System.err.println("ERROR: DIVISION POR CERO NO VALIDA");
                  }
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresionmult",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresionmult ::= expresionmult OP_MULT expresionsuma 
            {
              Integer RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = new Integer(f.intValue() * e.intValue());
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresionmult",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresionsuma ::= expresionmult 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = n; 
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresionsuma",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresionsuma ::= expresionsuma OP_RESTA expresionsuma 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = new Integer(e.intValue() - f.intValue());
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresionsuma",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresionsuma ::= expresionsuma OP_SUMA expresionsuma 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = new Integer(e.intValue() + f.intValue());
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresionsuma",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operadorrelacional ::= DISTINTO 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT=op;
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operadorrelacional",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operadorrelacional ::= IGUAL 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT=op;
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operadorrelacional",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operadorrelacional ::= MAYIGUAL 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT=op;
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operadorrelacional",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operadorrelacional ::= MENIGUAL 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT=op;
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operadorrelacional",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operadorrelacional ::= MAYQUE 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT=op;
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operadorrelacional",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operadorrelacional ::= MENQUE 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT=op;
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operadorrelacional",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= expresionsuma 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = e; 
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= expresionsuma operadorrelacional expresionsuma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int oprelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int oprelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object oprel = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                  String val1=a.toString();
                  String val2=b.toString();
                  if(oprel.toString().compareTo(">") == 0){
                    if(a > b){
                      RESULT = true;
                    }else{
                      RESULT = false;
                    }
                  }
                  if(oprel.toString().compareTo("<") == 0){
                    if(a < b){
                      RESULT = true;
                    }else{
                      RESULT = false;
                    }
                  }
                  if(oprel.toString().compareTo("<=") == 0){
                    if(a <= b){
                      RESULT = true;
                    }else{
                      RESULT = false;
                    }
                  }
                  if(oprel.toString().compareTo(">=") == 0){
                    if(a >= b){
                      RESULT = true;
                    }else{
                      RESULT = false;
                    }
                  }
                  if(oprel.toString().compareTo("==") == 0){
                    if(a == b){
                      RESULT = true;
                    }else{
                      RESULT = false;
                    }
                  }
                  if(oprel.toString().compareTo("!=") == 0){
                    if(a != b){
                      RESULT = true;
                    }else{
                      RESULT = false;
                    }
                  }
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= CIRCULAR NUM 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                  RESULT = c.toString() + n.toString();
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo ::= RECTO NUM 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = r.toString() + n.toString();
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // dedo ::= PULGAR 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                  RESULT = p;
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dedo",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // dedo ::= INDICE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                  RESULT = i;
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dedo",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // dedo ::= MEDIO 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                  RESULT = m;
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dedo",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // dedo ::= ANULAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                  RESULT = a;
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dedo",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // dedo ::= MENIQUE 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                  RESULT = m;
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dedo",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // moverdedo ::= MOVER dedo tipo 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                  Dedo nuevo = new Dedo();
                  nuevo.setDedo(d.toString());
                  if(getTIPO(t.toString()).compareTo("recto") == 0)
                  {
                    nuevo.setRecto(true);
                  }else{
                    nuevo.setRecto(false);
                  }
                  nuevo.setGrados(getNUM(t.toString()));
                  RESULT = nuevo;
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("moverdedo",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracionasignacion ::= ID ASIGN expresion 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                  tablaSimbolos.buscar(nom.toString()).setValor((int)e);
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracionasignacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion ::= declaracionasignacion 
            {
              Object RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object da = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    Vector<Dedo> lista = new Vector();
                    RESULT = lista;
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= declaracioniteracion 
            {
              Object RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = di;
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= declaracionseleccion 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = ds;
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= moverdedo 
            {
              Object RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                  Vector<Dedo> lista = new Vector();
                  lista.add((Dedo)md);
                  RESULT = lista;
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // listadeclaraciones ::= declaracion 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = d;
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listadeclaraciones",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // listadeclaraciones ::= listadeclaraciones declaracion 
            {
              Object RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object ld = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    Vector<Dedo> lista = unirLista((Vector<Dedo>)ld, (Vector<Dedo>)d);
                    RESULT = lista;
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listadeclaraciones",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracionvariable ::= DECLARAR ID 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                  tablaSimbolos.insertarFinal(nom.toString(), 0, nomleft);
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracionvariable",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listavariables ::= declaracionvariable 
            {
              Object RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listavariables",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listavariables ::= listavariables declaracionvariable 
            {
              Object RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object lv = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("listavariables",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= listavariables listadeclaraciones 
            {
              Object RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object lv = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ld = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    unirLista(listaDedos, ((Vector<Dedo>)ld));
                    for(int i = 0; i < listaDedos.size(); i++)
                    {
                      System.out.println(listaDedos.elementAt(i).getDedo());
                    }
                  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

